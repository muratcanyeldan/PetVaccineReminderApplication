services:
  postgres-app:
    image: postgres:17-alpine
    container_name: postgres-app
    ports:
      - "5432:5432"
    volumes:
      - ~/reminder/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: <INSERT_DB_PASS>
      POSTGRES_USER: <INSERT_DB_USERNAME>
      POSTGRES_DB: petvaccine
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:17
    container_name: keycloak-db
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    volumes:
      - ~/reminder/postgres_keycloak:/var/lib/postgresql/data
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:26.0
    container_name: keycloak
    environment:
      KC_LOG_LEVEL: DEBUG
      KC_DB: postgres
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KEYCLOAK_IMPORT: /opt/keycloak/data/import/realm-export.json -Dkeycloak.profile.feature.upload_scripts=enabled
    command: [ "start-dev", "--import-realm" ]
    volumes:
      - ~/reminder/keycloak/imports:/opt/keycloak/data/import
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD-SHELL", "exec 3<>/dev/tcp/127.0.0.1/9000; echo -e 'GET /health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n' >&3;cat <&3 | grep -q '\"status\": \"UP\"' && exit 0 || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=petadmin@example.com
      - PGADMIN_DEFAULT_PASSWORD=test
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    volumes:
      - ~/reminder/pgadmin/servers.json:/pgadmin4/servers.json
    ports:
      - "8094:80"
    depends_on:
      postgres-app:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: [ "CMD", "wget", "-O", "-", "http://localhost:80/misc/ping" ]
      interval: 10s
      timeout: 10s
      start_period: 160s
      retries: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ALLOW_ANONYMOUS_LOGIN: yes
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - backend-network

  kafka:
    image: confluentinc/cp-kafka:latest
    hostname: kafka-broker
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      ALLOW_PLAINTEXT_LISTENER: yes
    ports:
      - "9092:9092"
      - "29092:29092"
    depends_on:
      - zookeeper
    networks:
      - backend-network
    volumes:
      - ~/reminder/kafka/data:/etc/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - "9000:8080"
    depends_on:
      zookeeper:
        condition: service_started
      kafka:
        condition: service_healthy
    networks:
      - backend-network
    environment:
      KAFKA_CLUSTERS_0_NAME: kafka-ui
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  reminder_service:
    build:
      dockerfile: Dockerfile
    container_name: reminder_service
    restart: on-failure
    ports:
      - "8085:8085"
      - "8000:8000"
    environment:
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      postgres-app:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - backend-network
    healthcheck:
      test: "wget -T5 -qO- http://localhost:8085/actuator/health | grep UP || exit 1"
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 20s

volumes:
  postgres_keycloak:

networks:
  backend-network:
    driver: bridge
